{"error": null, "issues": [{"address": 11, "code": "function Owned() {\n        owner = msg.sender;\n    }", "contract": "Owned", "description": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).", "filename": "/home/ubuntu/smartbugs-curated/dataset/unchecked_low_level_calls/0xec329ffc97d75fe03428ae155fc7793431487f63.sol", "function": "constructor", "lineno": 10, "max_gas_used": 131, "min_gas_used": 36, "severity": "Medium", "sourceMap": "149:52", "swc-id": "110", "title": "Exception State", "tx_sequence": {"initialState": {"accounts": {"0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {"balance": "0x2", "code": "", "nonce": 0, "storage": "{}"}, "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}}}, "steps": [{"address": "", "calldata": "", "input": "0x6060604052341561000c57fe5b5b33600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b6103438061005f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680638da5cb5b14610051578063a6f9dae1146100a3578063b61d27f6146100d9575bfe5b341561005957fe5b61006161015b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156100ab57fe5b6100d7600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610181565b005b34156100e157fe5b610159600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190505061021e565b005b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561021a5780600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b5b50565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415610311578273ffffffffffffffffffffffffffffffffffffffff168282604051808280519060200190808383600083146102c9575b8051825260208311156102c9576020820191506020810190506020830392506102a5565b505050905090810190601f1680156102f55780820380516001836020036101000a031916815260200191505b5091505060006040518083038185876187965a03f192505050505b5b5b5050505600a165627a7a7230582046ace751c070741dbd91e25c4f1411168fb342e4f69b0d717e0e2131a03ff9310029", "name": "unknown", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "value": "0x1"}]}}, {"address": 11, "code": "function TokenSender(address _token) {\n        token = Token(_token);\n    }", "contract": "TokenSender", "description": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).", "filename": "/home/ubuntu/smartbugs-curated/dataset/unchecked_low_level_calls/0xec329ffc97d75fe03428ae155fc7793431487f63.sol", "function": "constructor", "lineno": 53, "max_gas_used": 131, "min_gas_used": 36, "severity": "Medium", "sourceMap": "1382:75", "swc-id": "110", "title": "Exception State", "tx_sequence": {"initialState": {"accounts": {"0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {"balance": "0x2", "code": "", "nonce": 0, "storage": "{}"}, "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}}}, "steps": [{"address": "", "calldata": "", "input": "0x6060604052341561000c57fe5b604051602080610c7e833981016040528080519060200190919050505b5b33600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b505b610bbf806100bf6000396000f300606060405236156100ad576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063211a04db146100af5780633585e500146100d55780634c8fe526146100fb5780635f2befb914610121578063884b5dc21461014b5780638da5cb5b146101a25780639377d711146101f4578063a6f9dae11461025b578063b61d27f614610291578063c040622614610313578063fc0c546a14610325575bfe5b34156100b757fe5b6100bf610377565b6040518082815260200191505060405180910390f35b34156100dd57fe5b6100e561037d565b6040518082815260200191505060405180910390f35b341561010357fe5b61010b61038b565b6040518082815260200191505060405180910390f35b341561012957fe5b610131610391565b604051808215151515815260200191505060405180910390f35b341561015357fe5b6101a06004808035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919050506103ca565b005b34156101aa57fe5b6101b2610594565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156101fc57fe5b61021260048080359060200190919050506105ba565b604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390f35b341561026357fe5b61028f600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061060e565b005b341561029957fe5b610311600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919050506106ab565b005b341561031b57fe5b6103236107a4565b005b341561032d57fe5b610335610ae3565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b60025481565b600060048054905090505b90565b60035481565b6000600060048054905014156103aa57600090506103c7565b60048054905060035410156103c257600090506103c7565b600190505b90565b60006000600060006000600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561058b576000600354111561043b5760006000fd5b60048054905093508551600480549050016004816104599190610b12565b50600092505b85518310156105795760017401000000000000000000000000000000000000000003868481518110151561048f57fe5b906020019060200201511691507401000000000000000000000000000000000000000086848151811015156104c057fe5b906020019060200201518115156104d357fe5b0490508160048486018154811015156104e857fe5b906000526020600020906002020160005b5060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600484860181548110151561054d57fe5b906000526020600020906002020160005b506001018190555080850194505b828060010193505061045f565b846002600082825401925050819055505b5b5b505050505050565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6004818154811015156105c957fe5b906000526020600020906002020160005b915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154905082565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156106a75780600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b5b50565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561079e578273ffffffffffffffffffffffffffffffffffffffff16828260405180828051906020019080838360008314610756575b80518252602083111561075657602082019150602081019050602083039250610732565b505050905090810190601f1680156107825780820380516001836020036101000a031916815260200191505b5091505060006040518083038185876187965a03f192505050505b5b5b505050565b600060006000600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415610add576000600480549050141561081357610adc565b600354925060048054905060038190555060008314801561090f5750600254600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15156108f457fe5b6102c65a03f1151561090257fe5b5050506040518051905014155b1561091a5760006000fd5b5b600480549050831080156109385750620249f0610936610b09565b115b15610ad45760048381548110151561094c57fe5b906000526020600020906002020160005b5060010154915060048381548110151561097357fe5b906000526020600020906002020160005b5060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000821115610ac757600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb82600486815481101515610a0257fe5b906000526020600020906002020160005b50600101546000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1515610aa257fe5b6102c65a03f11515610ab057fe5b505050604051805190501515610ac65760006000fd5b5b828060010193505061091b565b826003819055505b5b5b505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60005a90505b90565b815481835581811511610b3f57600202816002028360005260206000209182019101610b3e9190610b44565b5b505050565b610b9091905b80821115610b8c5760006000820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600182016000905550600201610b4a565b5090565b905600a165627a7a7230582024a278946760c62b8d556bf0a48ed7b8a8aa0d8511c2bdc4b771e8ccbd2f45eb0029", "name": "unknown", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "value": "0x1"}]}}, {"address": 88, "code": "address public owner", "contract": "Owned", "description": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).", "filename": "/home/ubuntu/smartbugs-curated/dataset/unchecked_low_level_calls/0xec329ffc97d75fe03428ae155fc7793431487f63.sol", "function": "owner()", "lineno": 14, "max_gas_used": 177, "min_gas_used": 82, "severity": "Medium", "sourceMap": "207:20", "swc-id": "110", "title": "Exception State", "tx_sequence": {"initialState": {"accounts": {"0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}, "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}}}, "steps": [{"address": "", "calldata": "", "input": "0x6060604052341561000c57fe5b5b33600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b6103438061005f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680638da5cb5b14610051578063a6f9dae1146100a3578063b61d27f6146100d9575bfe5b341561005957fe5b61006161015b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156100ab57fe5b6100d7600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610181565b005b34156100e157fe5b610159600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190505061021e565b005b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561021a5780600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b5b50565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415610311578273ffffffffffffffffffffffffffffffffffffffff168282604051808280519060200190808383600083146102c9575b8051825260208311156102c9576020820191506020810190506020830392506102a5565b505050905090810190601f1680156102f55780820380516001836020036101000a031916815260200191505b5091505060006040518083038185876187965a03f192505050505b5b5b5050505600a165627a7a7230582046ace751c070741dbd91e25c4f1411168fb342e4f69b0d717e0e2131a03ff9310029", "name": "unknown", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "value": "0x0"}, {"address": "0x901d12ebe1b195e5aa8748e62bd7734ae19b51f", "calldata": "0x8da5cb5b", "input": "0x8da5cb5b", "name": "owner()", "origin": "0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "resolved_input": null, "value": "0x1"}]}}, {"address": 174, "code": "contract TokenSender is Owned {\n    Token public token; // the token we are working with\n    uint public totalToDistribute;\n\n    uint public next;\n\n\n    struct Transfer {\n        address addr;\n        uint amount;\n    }\n\n    Transfer[] public transfers;\n\n    function TokenSender(address _token) {\n        token = Token(_token);\n    }\n\n    // this is a used to save gas\n    uint constant D160 = 0x0010000000000000000000000000000000000000000;\n\n    // This is the function that makes the list of transfers and various\n    //  checks around that list, it is a little tricky, the data input is\n    //  structured with the `amount` and the (receiving) `addr` combined as one\n    //  long number and then this number is deconstructed in this function to\n    //  save gas and reduce the number of `0`'s that are needed to be stored\n    //   on the blockchain\n    function fill(uint[] data) onlyOwner {\n\n        // If the send has started then we just throw\n        if (next>0) throw;\n\n        uint acc;\n        uint offset = transfers.length;\n        transfers.length = transfers.length + data.length;\n        for (uint i = 0; i < data.length; i++ ) {\n            address addr = address( data[i] & (D160-1) );\n            uint amount = data[i] / D160;\n\n            transfers[offset + i].addr = addr;\n            transfers[offset + i].amount = amount;\n            acc += amount;\n        }\n        totalToDistribute += acc;\n    }\n    // This function actually makes the sends and tracks the amount of gas used\n    //  if it takes more gas than was sent with the transaction then this\n    //  function will need to be called a few times until\n    function run() onlyOwner {\n        if (transfers.length == 0) return;\n\n        // Keep next in the stack var mNext to save gas\n        uint mNext = next;\n\n        // Set the contract as finalized to avoid reentrance\n        next = transfers.length;\n\n        if ((mNext == 0 ) && ( token.balanceOf(this) != totalToDistribute)) throw;\n\n        while ((mNext<transfers.length) && ( gas() > 150000 )) {\n            uint amount = transfers[mNext].amount;\n            address addr = transfers[mNext].addr;\n            if (amount > 0) {\n                if (!token.transfer(addr, transfers[mNext].amount)) throw;\n            }\n            mNext ++;\n        }\n\n        // Set the next to the actual state.\n        next = mNext;\n    }\n\n\n    ///////////////////////\n    // Helper functions\n    ///////////////////////\n\n    function hasTerminated() constant returns (bool) {\n        if (transfers.length == 0) return false;\n        if (next < transfers.length) return false;\n        return true;\n    }\n\n    function nTransfers() constant returns (uint) {\n        return transfers.length;\n    }\n\n    function gas() internal constant returns (uint _gas) {\n        assembly {\n            _gas:= gas\n        }\n    }\n\n}", "contract": "TokenSender", "description": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).", "filename": "/home/ubuntu/smartbugs-curated/dataset/unchecked_low_level_calls/0xec329ffc97d75fe03428ae155fc7793431487f63.sol", "function": "fallback", "lineno": 39, "max_gas_used": 132, "min_gas_used": 37, "severity": "Medium", "sourceMap": "1123:2839:0:-", "swc-id": "110", "title": "Exception State", "tx_sequence": {"initialState": {"accounts": {"0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}, "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}}}, "steps": [{"address": "", "calldata": "", "input": "0x6060604052341561000c57fe5b604051602080610c7e833981016040528080519060200190919050505b5b33600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b505b610bbf806100bf6000396000f300606060405236156100ad576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063211a04db146100af5780633585e500146100d55780634c8fe526146100fb5780635f2befb914610121578063884b5dc21461014b5780638da5cb5b146101a25780639377d711146101f4578063a6f9dae11461025b578063b61d27f614610291578063c040622614610313578063fc0c546a14610325575bfe5b34156100b757fe5b6100bf610377565b6040518082815260200191505060405180910390f35b34156100dd57fe5b6100e561037d565b6040518082815260200191505060405180910390f35b341561010357fe5b61010b61038b565b6040518082815260200191505060405180910390f35b341561012957fe5b610131610391565b604051808215151515815260200191505060405180910390f35b341561015357fe5b6101a06004808035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919050506103ca565b005b34156101aa57fe5b6101b2610594565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156101fc57fe5b61021260048080359060200190919050506105ba565b604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390f35b341561026357fe5b61028f600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061060e565b005b341561029957fe5b610311600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919050506106ab565b005b341561031b57fe5b6103236107a4565b005b341561032d57fe5b610335610ae3565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b60025481565b600060048054905090505b90565b60035481565b6000600060048054905014156103aa57600090506103c7565b60048054905060035410156103c257600090506103c7565b600190505b90565b60006000600060006000600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561058b576000600354111561043b5760006000fd5b60048054905093508551600480549050016004816104599190610b12565b50600092505b85518310156105795760017401000000000000000000000000000000000000000003868481518110151561048f57fe5b906020019060200201511691507401000000000000000000000000000000000000000086848151811015156104c057fe5b906020019060200201518115156104d357fe5b0490508160048486018154811015156104e857fe5b906000526020600020906002020160005b5060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600484860181548110151561054d57fe5b906000526020600020906002020160005b506001018190555080850194505b828060010193505061045f565b846002600082825401925050819055505b5b5b505050505050565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6004818154811015156105c957fe5b906000526020600020906002020160005b915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154905082565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156106a75780600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b5b50565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561079e578273ffffffffffffffffffffffffffffffffffffffff16828260405180828051906020019080838360008314610756575b80518252602083111561075657602082019150602081019050602083039250610732565b505050905090810190601f1680156107825780820380516001836020036101000a031916815260200191505b5091505060006040518083038185876187965a03f192505050505b5b5b505050565b600060006000600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415610add576000600480549050141561081357610adc565b600354925060048054905060038190555060008314801561090f5750600254600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15156108f457fe5b6102c65a03f1151561090257fe5b5050506040518051905014155b1561091a5760006000fd5b5b600480549050831080156109385750620249f0610936610b09565b115b15610ad45760048381548110151561094c57fe5b906000526020600020906002020160005b5060010154915060048381548110151561097357fe5b906000526020600020906002020160005b5060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000821115610ac757600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb82600486815481101515610a0257fe5b906000526020600020906002020160005b50600101546000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1515610aa257fe5b6102c65a03f11515610ab057fe5b505050604051805190501515610ac65760006000fd5b5b828060010193505061091b565b826003819055505b5b5b505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60005a90505b90565b815481835581811511610b3f57600202816002028360005260206000209182019101610b3e9190610b44565b5b505050565b610b9091905b80821115610b8c5760006000820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600182016000905550600201610b4a565b5090565b905600a165627a7a7230582024a278946760c62b8d556bf0a48ed7b8a8aa0d8511c2bdc4b771e8ccbd2f45eb0029", "name": "unknown", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "value": "0x0"}, {"address": "0x901d12ebe1b195e5aa8748e62bd7734ae19b51f", "calldata": "0x", "input": "0x", "name": "unknown", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "value": "0x0"}]}}, {"address": 360, "code": "function fill(uint[] data) onlyOwner {\n\n        // If the send has started then we just throw\n        if (next>0) throw;\n\n        uint acc;\n        uint offset = transfers.length;\n        transfers.length = transfers.length + data.length;\n        for (uint i = 0; i < data.length; i++ ) {\n            address addr = address( data[i] & (D160-1) );\n            uint amount = data[i] / D160;\n\n            transfers[offset + i].addr = addr;\n            transfers[offset + i].amount = amount;\n            acc += amount;\n        }\n        totalToDistribute += acc;\n    }", "contract": "TokenSender", "description": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. ", "filename": "/home/ubuntu/smartbugs-curated/dataset/unchecked_low_level_calls/0xec329ffc97d75fe03428ae155fc7793431487f63.sol", "function": "fill(uint256[])", "lineno": 66, "max_gas_used": 166898, "min_gas_used": 41635, "severity": "High", "sourceMap": "1979:564", "swc-id": "101", "title": "Integer Arithmetic Bugs", "tx_sequence": {"initialState": {"accounts": {"0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}, "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}}}, "steps": [{"address": "", "calldata": "", "input": "0x6060604052341561000c57fe5b604051602080610c7e833981016040528080519060200190919050505b5b33600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b505b610bbf806100bf6000396000f300606060405236156100ad576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063211a04db146100af5780633585e500146100d55780634c8fe526146100fb5780635f2befb914610121578063884b5dc21461014b5780638da5cb5b146101a25780639377d711146101f4578063a6f9dae11461025b578063b61d27f614610291578063c040622614610313578063fc0c546a14610325575bfe5b34156100b757fe5b6100bf610377565b6040518082815260200191505060405180910390f35b34156100dd57fe5b6100e561037d565b6040518082815260200191505060405180910390f35b341561010357fe5b61010b61038b565b6040518082815260200191505060405180910390f35b341561012957fe5b610131610391565b604051808215151515815260200191505060405180910390f35b341561015357fe5b6101a06004808035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919050506103ca565b005b34156101aa57fe5b6101b2610594565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156101fc57fe5b61021260048080359060200190919050506105ba565b604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390f35b341561026357fe5b61028f600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061060e565b005b341561029957fe5b610311600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919050506106ab565b005b341561031b57fe5b6103236107a4565b005b341561032d57fe5b610335610ae3565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b60025481565b600060048054905090505b90565b60035481565b6000600060048054905014156103aa57600090506103c7565b60048054905060035410156103c257600090506103c7565b600190505b90565b60006000600060006000600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561058b576000600354111561043b5760006000fd5b60048054905093508551600480549050016004816104599190610b12565b50600092505b85518310156105795760017401000000000000000000000000000000000000000003868481518110151561048f57fe5b906020019060200201511691507401000000000000000000000000000000000000000086848151811015156104c057fe5b906020019060200201518115156104d357fe5b0490508160048486018154811015156104e857fe5b906000526020600020906002020160005b5060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600484860181548110151561054d57fe5b906000526020600020906002020160005b506001018190555080850194505b828060010193505061045f565b846002600082825401925050819055505b5b5b505050505050565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6004818154811015156105c957fe5b906000526020600020906002020160005b915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154905082565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156106a75780600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b5b50565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561079e578273ffffffffffffffffffffffffffffffffffffffff16828260405180828051906020019080838360008314610756575b80518252602083111561075657602082019150602081019050602083039250610732565b505050905090810190601f1680156107825780820380516001836020036101000a031916815260200191505b5091505060006040518083038185876187965a03f192505050505b5b5b505050565b600060006000600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415610add576000600480549050141561081357610adc565b600354925060048054905060038190555060008314801561090f5750600254600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15156108f457fe5b6102c65a03f1151561090257fe5b5050506040518051905014155b1561091a5760006000fd5b5b600480549050831080156109385750620249f0610936610b09565b115b15610ad45760048381548110151561094c57fe5b906000526020600020906002020160005b5060010154915060048381548110151561097357fe5b906000526020600020906002020160005b5060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000821115610ac757600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb82600486815481101515610a0257fe5b906000526020600020906002020160005b50600101546000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1515610aa257fe5b6102c65a03f11515610ab057fe5b505050604051805190501515610ac65760006000fd5b5b828060010193505061091b565b826003819055505b5b5b505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60005a90505b90565b815481835581811511610b3f57600202816002028360005260206000209182019101610b3e9190610b44565b5b505050565b610b9091905b80821115610b8c5760006000820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600182016000905550600201610b4a565b5090565b905600a165627a7a7230582024a278946760c62b8d556bf0a48ed7b8a8aa0d8511c2bdc4b771e8ccbd2f45eb0029", "name": "unknown", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "value": "0x0"}, {"address": "0x901d12ebe1b195e5aa8748e62bd7734ae19b51f", "calldata": "0x884b5dc2ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc", "input": "0x884b5dc2ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc", "name": "fill(uint256[])", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "resolved_input": null, "value": "0x0"}]}}, {"address": 778, "contract": "Owned", "description": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.", "function": "execute(address,uint256,bytes)", "max_gas_used": 40843, "min_gas_used": 2470, "severity": "Low", "sourceMap": 778, "swc-id": "107", "title": "External Call To User-Supplied Address", "tx_sequence": {"initialState": {"accounts": {"0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}, "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}}}, "steps": [{"address": "", "calldata": "", "input": "0x6060604052341561000c57fe5b5b33600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b6103438061005f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680638da5cb5b14610051578063a6f9dae1146100a3578063b61d27f6146100d9575bfe5b341561005957fe5b61006161015b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156100ab57fe5b6100d7600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610181565b005b34156100e157fe5b610159600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190505061021e565b005b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561021a5780600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b5b50565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415610311578273ffffffffffffffffffffffffffffffffffffffff168282604051808280519060200190808383600083146102c9575b8051825260208311156102c9576020820191506020810190506020830392506102a5565b505050905090810190601f1680156102f55780820380516001836020036101000a031916815260200191505b5091505060006040518083038185876187965a03f192505050505b5b5b5050505600a165627a7a7230582046ace751c070741dbd91e25c4f1411168fb342e4f69b0d717e0e2131a03ff9310029", "name": "unknown", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "value": "0x0"}, {"address": "0x901d12ebe1b195e5aa8748e62bd7734ae19b51f", "calldata": "0xb61d27f6000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000000000000000000080", "input": "0xb61d27f6000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000000000000000000080", "name": "execute(address,uint256,bytes)", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "resolved_input": null, "value": "0x0"}]}}, {"address": 778, "contract": "Owned", "description": "Contract has hardcoded gas values for transaction(s).\nOne should never set a predefined gas value on any call. The gas consumed by each opcode is not written in stone and is subject to revisions by EIPs. Hence these maybe increased or decreased in future versions of the protocol and any transaction relying on the hardcoded estimates of gas values may not function as intended leading to exploits.", "function": "execute(address,uint256,bytes)", "max_gas_used": 4746, "min_gas_used": 1455, "severity": "Low", "sourceMap": 778, "swc-id": "134", "title": "Hardcoded gas amount", "tx_sequence": {"initialState": {"accounts": {"0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}, "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}}}, "steps": [{"address": "", "calldata": "", "input": "0x6060604052341561000c57fe5b5b33600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b6103438061005f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680638da5cb5b14610051578063a6f9dae1146100a3578063b61d27f6146100d9575bfe5b341561005957fe5b61006161015b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156100ab57fe5b6100d7600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610181565b005b34156100e157fe5b610159600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190505061021e565b005b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561021a5780600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b5b50565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415610311578273ffffffffffffffffffffffffffffffffffffffff168282604051808280519060200190808383600083146102c9575b8051825260208311156102c9576020820191506020810190506020830392506102a5565b505050905090810190601f1680156102f55780820380516001836020036101000a031916815260200191505b5091505060006040518083038185876187965a03f192505050505b5b5b5050505600a165627a7a7230582046ace751c070741dbd91e25c4f1411168fb342e4f69b0d717e0e2131a03ff9310029", "name": "unknown", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "value": "0x0"}, {"address": "0x901d12ebe1b195e5aa8748e62bd7734ae19b51f", "calldata": "0xb61d27f6", "input": "0xb61d27f6", "name": "execute(address,uint256,bytes)", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "resolved_input": null, "value": "0x0"}]}}, {"address": 778, "contract": "Owned", "description": "The return value of a message call is not checked.\nExternal calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails.", "function": "execute(address,uint256,bytes)", "max_gas_used": 40843, "min_gas_used": 2470, "severity": "Medium", "sourceMap": 778, "swc-id": "104", "title": "Unchecked return value from external call.", "tx_sequence": {"initialState": {"accounts": {"0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}, "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}}}, "steps": [{"address": "", "calldata": "", "input": "0x6060604052341561000c57fe5b5b33600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b6103438061005f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680638da5cb5b14610051578063a6f9dae1146100a3578063b61d27f6146100d9575bfe5b341561005957fe5b61006161015b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156100ab57fe5b6100d7600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610181565b005b34156100e157fe5b610159600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190505061021e565b005b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561021a5780600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b5b50565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415610311578273ffffffffffffffffffffffffffffffffffffffff168282604051808280519060200190808383600083146102c9575b8051825260208311156102c9576020820191506020810190506020830392506102a5565b505050905090810190601f1680156102f55780820380516001836020036101000a031916815260200191505b5091505060006040518083038185876187965a03f192505050505b5b5b5050505600a165627a7a7230582046ace751c070741dbd91e25c4f1411168fb342e4f69b0d717e0e2131a03ff9310029", "name": "unknown", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "value": "0x0"}, {"address": "0x901d12ebe1b195e5aa8748e62bd7734ae19b51f", "calldata": "0xb61d27f6000000000000000000000000000000000000000000000000000000000000005e", "input": "0xb61d27f6000000000000000000000000000000000000000000000000000000000000005e", "name": "execute(address,uint256,bytes)", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "resolved_input": null, "value": "0x0"}]}}, {"address": 1128, "code": "for (uint i = 0; i < data.length; i++ ) {\n            address addr = address( data[i] & (D160-1) );\n            uint amount = data[i] / D160;\n\n            transfers[offset + i].addr = addr;\n            transfers[offset + i].amount = amount;\n            acc += amount;\n        }", "contract": "TokenSender", "description": "Potential denial-of-service if block gas limit is reached.\nA storage modification is executed in a loop.", "filename": "/home/ubuntu/smartbugs-curated/dataset/unchecked_low_level_calls/0xec329ffc97d75fe03428ae155fc7793431487f63.sol", "function": "fill(uint256[])", "lineno": 74, "max_gas_used": 272304, "min_gas_used": 65489, "severity": "Low", "sourceMap": "2226:277", "swc-id": "128", "title": "Potential denial-of-service if block gas limit is reached", "tx_sequence": null}, {"address": 1480, "code": "Transfer[] public transfers", "contract": "TokenSender", "description": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).", "filename": "/home/ubuntu/smartbugs-curated/dataset/unchecked_low_level_calls/0xec329ffc97d75fe03428ae155fc7793431487f63.sol", "function": "transfers(uint256)", "lineno": 51, "max_gas_used": 1211, "min_gas_used": 1116, "severity": "Medium", "sourceMap": "1348:27", "swc-id": "110", "title": "Exception State", "tx_sequence": {"initialState": {"accounts": {"0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}, "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}}}, "steps": [{"address": "", "calldata": "", "input": "0x6060604052341561000c57fe5b604051602080610c7e833981016040528080519060200190919050505b5b33600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b505b610bbf806100bf6000396000f300606060405236156100ad576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063211a04db146100af5780633585e500146100d55780634c8fe526146100fb5780635f2befb914610121578063884b5dc21461014b5780638da5cb5b146101a25780639377d711146101f4578063a6f9dae11461025b578063b61d27f614610291578063c040622614610313578063fc0c546a14610325575bfe5b34156100b757fe5b6100bf610377565b6040518082815260200191505060405180910390f35b34156100dd57fe5b6100e561037d565b6040518082815260200191505060405180910390f35b341561010357fe5b61010b61038b565b6040518082815260200191505060405180910390f35b341561012957fe5b610131610391565b604051808215151515815260200191505060405180910390f35b341561015357fe5b6101a06004808035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919050506103ca565b005b34156101aa57fe5b6101b2610594565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156101fc57fe5b61021260048080359060200190919050506105ba565b604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390f35b341561026357fe5b61028f600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061060e565b005b341561029957fe5b610311600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919050506106ab565b005b341561031b57fe5b6103236107a4565b005b341561032d57fe5b610335610ae3565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b60025481565b600060048054905090505b90565b60035481565b6000600060048054905014156103aa57600090506103c7565b60048054905060035410156103c257600090506103c7565b600190505b90565b60006000600060006000600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561058b576000600354111561043b5760006000fd5b60048054905093508551600480549050016004816104599190610b12565b50600092505b85518310156105795760017401000000000000000000000000000000000000000003868481518110151561048f57fe5b906020019060200201511691507401000000000000000000000000000000000000000086848151811015156104c057fe5b906020019060200201518115156104d357fe5b0490508160048486018154811015156104e857fe5b906000526020600020906002020160005b5060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600484860181548110151561054d57fe5b906000526020600020906002020160005b506001018190555080850194505b828060010193505061045f565b846002600082825401925050819055505b5b5b505050505050565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6004818154811015156105c957fe5b906000526020600020906002020160005b915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154905082565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156106a75780600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b5b50565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561079e578273ffffffffffffffffffffffffffffffffffffffff16828260405180828051906020019080838360008314610756575b80518252602083111561075657602082019150602081019050602083039250610732565b505050905090810190601f1680156107825780820380516001836020036101000a031916815260200191505b5091505060006040518083038185876187965a03f192505050505b5b5b505050565b600060006000600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415610add576000600480549050141561081357610adc565b600354925060048054905060038190555060008314801561090f5750600254600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15156108f457fe5b6102c65a03f1151561090257fe5b5050506040518051905014155b1561091a5760006000fd5b5b600480549050831080156109385750620249f0610936610b09565b115b15610ad45760048381548110151561094c57fe5b906000526020600020906002020160005b5060010154915060048381548110151561097357fe5b906000526020600020906002020160005b5060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000821115610ac757600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb82600486815481101515610a0257fe5b906000526020600020906002020160005b50600101546000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1515610aa257fe5b6102c65a03f11515610ab057fe5b505050604051805190501515610ac65760006000fd5b5b828060010193505061091b565b826003819055505b5b5b505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60005a90505b90565b815481835581811511610b3f57600202816002028360005260206000209182019101610b3e9190610b44565b5b505050565b610b9091905b80821115610b8c5760006000820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600182016000905550600201610b4a565b5090565b905600a165627a7a7230582024a278946760c62b8d556bf0a48ed7b8a8aa0d8511c2bdc4b771e8ccbd2f45eb0029", "name": "unknown", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "value": "0x0"}, {"address": "0x901d12ebe1b195e5aa8748e62bd7734ae19b51f", "calldata": "0x9377d711", "input": "0x9377d711", "name": "transfers(uint256)", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "resolved_input": null, "value": "0x0"}]}}, {"address": 1943, "contract": "TokenSender", "description": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.", "function": "execute(address,uint256,bytes)", "max_gas_used": 40993, "min_gas_used": 2620, "severity": "Low", "sourceMap": 1943, "swc-id": "107", "title": "External Call To User-Supplied Address", "tx_sequence": {"initialState": {"accounts": {"0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}, "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}}}, "steps": [{"address": "", "calldata": "", "input": "0x6060604052341561000c57fe5b604051602080610c7e833981016040528080519060200190919050505b5b33600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b505b610bbf806100bf6000396000f300606060405236156100ad576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063211a04db146100af5780633585e500146100d55780634c8fe526146100fb5780635f2befb914610121578063884b5dc21461014b5780638da5cb5b146101a25780639377d711146101f4578063a6f9dae11461025b578063b61d27f614610291578063c040622614610313578063fc0c546a14610325575bfe5b34156100b757fe5b6100bf610377565b6040518082815260200191505060405180910390f35b34156100dd57fe5b6100e561037d565b6040518082815260200191505060405180910390f35b341561010357fe5b61010b61038b565b6040518082815260200191505060405180910390f35b341561012957fe5b610131610391565b604051808215151515815260200191505060405180910390f35b341561015357fe5b6101a06004808035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919050506103ca565b005b34156101aa57fe5b6101b2610594565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156101fc57fe5b61021260048080359060200190919050506105ba565b604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390f35b341561026357fe5b61028f600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061060e565b005b341561029957fe5b610311600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919050506106ab565b005b341561031b57fe5b6103236107a4565b005b341561032d57fe5b610335610ae3565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b60025481565b600060048054905090505b90565b60035481565b6000600060048054905014156103aa57600090506103c7565b60048054905060035410156103c257600090506103c7565b600190505b90565b60006000600060006000600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561058b576000600354111561043b5760006000fd5b60048054905093508551600480549050016004816104599190610b12565b50600092505b85518310156105795760017401000000000000000000000000000000000000000003868481518110151561048f57fe5b906020019060200201511691507401000000000000000000000000000000000000000086848151811015156104c057fe5b906020019060200201518115156104d357fe5b0490508160048486018154811015156104e857fe5b906000526020600020906002020160005b5060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600484860181548110151561054d57fe5b906000526020600020906002020160005b506001018190555080850194505b828060010193505061045f565b846002600082825401925050819055505b5b5b505050505050565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6004818154811015156105c957fe5b906000526020600020906002020160005b915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154905082565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156106a75780600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b5b50565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561079e578273ffffffffffffffffffffffffffffffffffffffff16828260405180828051906020019080838360008314610756575b80518252602083111561075657602082019150602081019050602083039250610732565b505050905090810190601f1680156107825780820380516001836020036101000a031916815260200191505b5091505060006040518083038185876187965a03f192505050505b5b5b505050565b600060006000600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415610add576000600480549050141561081357610adc565b600354925060048054905060038190555060008314801561090f5750600254600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15156108f457fe5b6102c65a03f1151561090257fe5b5050506040518051905014155b1561091a5760006000fd5b5b600480549050831080156109385750620249f0610936610b09565b115b15610ad45760048381548110151561094c57fe5b906000526020600020906002020160005b5060010154915060048381548110151561097357fe5b906000526020600020906002020160005b5060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000821115610ac757600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb82600486815481101515610a0257fe5b906000526020600020906002020160005b50600101546000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1515610aa257fe5b6102c65a03f11515610ab057fe5b505050604051805190501515610ac65760006000fd5b5b828060010193505061091b565b826003819055505b5b5b505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60005a90505b90565b815481835581811511610b3f57600202816002028360005260206000209182019101610b3e9190610b44565b5b505050565b610b9091905b80821115610b8c5760006000820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600182016000905550600201610b4a565b5090565b905600a165627a7a7230582024a278946760c62b8d556bf0a48ed7b8a8aa0d8511c2bdc4b771e8ccbd2f45eb0029", "name": "unknown", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "value": "0x0"}, {"address": "0x901d12ebe1b195e5aa8748e62bd7734ae19b51f", "calldata": "0xb61d27f6000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000000000000000000080", "input": "0xb61d27f6000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000000000000000000080", "name": "execute(address,uint256,bytes)", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "resolved_input": null, "value": "0x0"}]}}, {"address": 1943, "contract": "TokenSender", "description": "Contract has hardcoded gas values for transaction(s).\nOne should never set a predefined gas value on any call. The gas consumed by each opcode is not written in stone and is subject to revisions by EIPs. Hence these maybe increased or decreased in future versions of the protocol and any transaction relying on the hardcoded estimates of gas values may not function as intended leading to exploits.", "function": "execute(address,uint256,bytes)", "max_gas_used": 4896, "min_gas_used": 1605, "severity": "Low", "sourceMap": 1943, "swc-id": "134", "title": "Hardcoded gas amount", "tx_sequence": {"initialState": {"accounts": {"0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}, "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}}}, "steps": [{"address": "", "calldata": "", "input": "0x6060604052341561000c57fe5b604051602080610c7e833981016040528080519060200190919050505b5b33600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b505b610bbf806100bf6000396000f300606060405236156100ad576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063211a04db146100af5780633585e500146100d55780634c8fe526146100fb5780635f2befb914610121578063884b5dc21461014b5780638da5cb5b146101a25780639377d711146101f4578063a6f9dae11461025b578063b61d27f614610291578063c040622614610313578063fc0c546a14610325575bfe5b34156100b757fe5b6100bf610377565b6040518082815260200191505060405180910390f35b34156100dd57fe5b6100e561037d565b6040518082815260200191505060405180910390f35b341561010357fe5b61010b61038b565b6040518082815260200191505060405180910390f35b341561012957fe5b610131610391565b604051808215151515815260200191505060405180910390f35b341561015357fe5b6101a06004808035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919050506103ca565b005b34156101aa57fe5b6101b2610594565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156101fc57fe5b61021260048080359060200190919050506105ba565b604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390f35b341561026357fe5b61028f600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061060e565b005b341561029957fe5b610311600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919050506106ab565b005b341561031b57fe5b6103236107a4565b005b341561032d57fe5b610335610ae3565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b60025481565b600060048054905090505b90565b60035481565b6000600060048054905014156103aa57600090506103c7565b60048054905060035410156103c257600090506103c7565b600190505b90565b60006000600060006000600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561058b576000600354111561043b5760006000fd5b60048054905093508551600480549050016004816104599190610b12565b50600092505b85518310156105795760017401000000000000000000000000000000000000000003868481518110151561048f57fe5b906020019060200201511691507401000000000000000000000000000000000000000086848151811015156104c057fe5b906020019060200201518115156104d357fe5b0490508160048486018154811015156104e857fe5b906000526020600020906002020160005b5060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600484860181548110151561054d57fe5b906000526020600020906002020160005b506001018190555080850194505b828060010193505061045f565b846002600082825401925050819055505b5b5b505050505050565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6004818154811015156105c957fe5b906000526020600020906002020160005b915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154905082565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156106a75780600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b5b50565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561079e578273ffffffffffffffffffffffffffffffffffffffff16828260405180828051906020019080838360008314610756575b80518252602083111561075657602082019150602081019050602083039250610732565b505050905090810190601f1680156107825780820380516001836020036101000a031916815260200191505b5091505060006040518083038185876187965a03f192505050505b5b5b505050565b600060006000600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415610add576000600480549050141561081357610adc565b600354925060048054905060038190555060008314801561090f5750600254600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15156108f457fe5b6102c65a03f1151561090257fe5b5050506040518051905014155b1561091a5760006000fd5b5b600480549050831080156109385750620249f0610936610b09565b115b15610ad45760048381548110151561094c57fe5b906000526020600020906002020160005b5060010154915060048381548110151561097357fe5b906000526020600020906002020160005b5060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000821115610ac757600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb82600486815481101515610a0257fe5b906000526020600020906002020160005b50600101546000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1515610aa257fe5b6102c65a03f11515610ab057fe5b505050604051805190501515610ac65760006000fd5b5b828060010193505061091b565b826003819055505b5b5b505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60005a90505b90565b815481835581811511610b3f57600202816002028360005260206000209182019101610b3e9190610b44565b5b505050565b610b9091905b80821115610b8c5760006000820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600182016000905550600201610b4a565b5090565b905600a165627a7a7230582024a278946760c62b8d556bf0a48ed7b8a8aa0d8511c2bdc4b771e8ccbd2f45eb0029", "name": "unknown", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "value": "0x0"}, {"address": "0x901d12ebe1b195e5aa8748e62bd7734ae19b51f", "calldata": "0xb61d27f6", "input": "0xb61d27f6", "name": "execute(address,uint256,bytes)", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "resolved_input": null, "value": "0x0"}]}}, {"address": 1943, "contract": "TokenSender", "description": "The return value of a message call is not checked.\nExternal calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails.", "function": "execute(address,uint256,bytes)", "max_gas_used": 40993, "min_gas_used": 2620, "severity": "Medium", "sourceMap": 1943, "swc-id": "104", "title": "Unchecked return value from external call.", "tx_sequence": {"initialState": {"accounts": {"0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}, "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}}}, "steps": [{"address": "", "calldata": "", "input": "0x6060604052341561000c57fe5b604051602080610c7e833981016040528080519060200190919050505b5b33600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b505b610bbf806100bf6000396000f300606060405236156100ad576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063211a04db146100af5780633585e500146100d55780634c8fe526146100fb5780635f2befb914610121578063884b5dc21461014b5780638da5cb5b146101a25780639377d711146101f4578063a6f9dae11461025b578063b61d27f614610291578063c040622614610313578063fc0c546a14610325575bfe5b34156100b757fe5b6100bf610377565b6040518082815260200191505060405180910390f35b34156100dd57fe5b6100e561037d565b6040518082815260200191505060405180910390f35b341561010357fe5b61010b61038b565b6040518082815260200191505060405180910390f35b341561012957fe5b610131610391565b604051808215151515815260200191505060405180910390f35b341561015357fe5b6101a06004808035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919050506103ca565b005b34156101aa57fe5b6101b2610594565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156101fc57fe5b61021260048080359060200190919050506105ba565b604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390f35b341561026357fe5b61028f600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061060e565b005b341561029957fe5b610311600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919050506106ab565b005b341561031b57fe5b6103236107a4565b005b341561032d57fe5b610335610ae3565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b60025481565b600060048054905090505b90565b60035481565b6000600060048054905014156103aa57600090506103c7565b60048054905060035410156103c257600090506103c7565b600190505b90565b60006000600060006000600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561058b576000600354111561043b5760006000fd5b60048054905093508551600480549050016004816104599190610b12565b50600092505b85518310156105795760017401000000000000000000000000000000000000000003868481518110151561048f57fe5b906020019060200201511691507401000000000000000000000000000000000000000086848151811015156104c057fe5b906020019060200201518115156104d357fe5b0490508160048486018154811015156104e857fe5b906000526020600020906002020160005b5060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600484860181548110151561054d57fe5b906000526020600020906002020160005b506001018190555080850194505b828060010193505061045f565b846002600082825401925050819055505b5b5b505050505050565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6004818154811015156105c957fe5b906000526020600020906002020160005b915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154905082565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156106a75780600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b5b50565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561079e578273ffffffffffffffffffffffffffffffffffffffff16828260405180828051906020019080838360008314610756575b80518252602083111561075657602082019150602081019050602083039250610732565b505050905090810190601f1680156107825780820380516001836020036101000a031916815260200191505b5091505060006040518083038185876187965a03f192505050505b5b5b505050565b600060006000600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415610add576000600480549050141561081357610adc565b600354925060048054905060038190555060008314801561090f5750600254600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15156108f457fe5b6102c65a03f1151561090257fe5b5050506040518051905014155b1561091a5760006000fd5b5b600480549050831080156109385750620249f0610936610b09565b115b15610ad45760048381548110151561094c57fe5b906000526020600020906002020160005b5060010154915060048381548110151561097357fe5b906000526020600020906002020160005b5060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000821115610ac757600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb82600486815481101515610a0257fe5b906000526020600020906002020160005b50600101546000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1515610aa257fe5b6102c65a03f11515610ab057fe5b505050604051805190501515610ac65760006000fd5b5b828060010193505061091b565b826003819055505b5b5b505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60005a90505b90565b815481835581811511610b3f57600202816002028360005260206000209182019101610b3e9190610b44565b5b505050565b610b9091905b80821115610b8c5760006000820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600182016000905550600201610b4a565b5090565b905600a165627a7a7230582024a278946760c62b8d556bf0a48ed7b8a8aa0d8511c2bdc4b771e8ccbd2f45eb0029", "name": "unknown", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "value": "0x0"}, {"address": "0x901d12ebe1b195e5aa8748e62bd7734ae19b51f", "calldata": "0xb61d27f6000000000000000000000000000000000000000000000000000000000000005e", "input": "0xb61d27f6000000000000000000000000000000000000000000000000000000000000005e", "name": "execute(address,uint256,bytes)", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "resolved_input": null, "value": "0x0"}]}}, {"address": 2898, "code": "contract TokenSender is Owned {\n    Token public token; // the token we are working with\n    uint public totalToDistribute;\n\n    uint public next;\n\n\n    struct Transfer {\n        address addr;\n        uint amount;\n    }\n\n    Transfer[] public transfers;\n\n    function TokenSender(address _token) {\n        token = Token(_token);\n    }\n\n    // this is a used to save gas\n    uint constant D160 = 0x0010000000000000000000000000000000000000000;\n\n    // This is the function that makes the list of transfers and various\n    //  checks around that list, it is a little tricky, the data input is\n    //  structured with the `amount` and the (receiving) `addr` combined as one\n    //  long number and then this number is deconstructed in this function to\n    //  save gas and reduce the number of `0`'s that are needed to be stored\n    //   on the blockchain\n    function fill(uint[] data) onlyOwner {\n\n        // If the send has started then we just throw\n        if (next>0) throw;\n\n        uint acc;\n        uint offset = transfers.length;\n        transfers.length = transfers.length + data.length;\n        for (uint i = 0; i < data.length; i++ ) {\n            address addr = address( data[i] & (D160-1) );\n            uint amount = data[i] / D160;\n\n            transfers[offset + i].addr = addr;\n            transfers[offset + i].amount = amount;\n            acc += amount;\n        }\n        totalToDistribute += acc;\n    }\n    // This function actually makes the sends and tracks the amount of gas used\n    //  if it takes more gas than was sent with the transaction then this\n    //  function will need to be called a few times until\n    function run() onlyOwner {\n        if (transfers.length == 0) return;\n\n        // Keep next in the stack var mNext to save gas\n        uint mNext = next;\n\n        // Set the contract as finalized to avoid reentrance\n        next = transfers.length;\n\n        if ((mNext == 0 ) && ( token.balanceOf(this) != totalToDistribute)) throw;\n\n        while ((mNext<transfers.length) && ( gas() > 150000 )) {\n            uint amount = transfers[mNext].amount;\n            address addr = transfers[mNext].addr;\n            if (amount > 0) {\n                if (!token.transfer(addr, transfers[mNext].amount)) throw;\n            }\n            mNext ++;\n        }\n\n        // Set the next to the actual state.\n        next = mNext;\n    }\n\n\n    ///////////////////////\n    // Helper functions\n    ///////////////////////\n\n    function hasTerminated() constant returns (bool) {\n        if (transfers.length == 0) return false;\n        if (next < transfers.length) return false;\n        return true;\n    }\n\n    function nTransfers() constant returns (uint) {\n        return transfers.length;\n    }\n\n    function gas() internal constant returns (uint _gas) {\n        assembly {\n            _gas:= gas\n        }\n    }\n\n}", "contract": "TokenSender", "description": "Potential denial-of-service if block gas limit is reached.\nA storage modification is executed in a loop.", "filename": "/home/ubuntu/smartbugs-curated/dataset/unchecked_low_level_calls/0xec329ffc97d75fe03428ae155fc7793431487f63.sol", "function": "fill(uint256[])", "lineno": 39, "max_gas_used": 161641, "min_gas_used": 37451, "severity": "Low", "sourceMap": ":::-", "swc-id": "128", "title": "Potential denial-of-service if block gas limit is reached", "tx_sequence": null}], "success": true}
Command exited with non-zero status 1
123.74user 1.36system 2:03.66elapsed 101%CPU (0avgtext+0avgdata 505292maxresident)k
0inputs+176outputs (0major+156749minor)pagefaults 0swaps
